pragma solidity ^0.4.21;

contract owned {
    address owner;
    
    function owned() external {
        owner = msg.sender;
    }
    
    modifier onlyOwner {
            require(msg.sender == owner);
            _;
    }
    
    function transferOwnership(address newOwner) onlyOwner public {
            owner = newOwner;
    }
        
    function kill () onlyOwner external {
        selfdestruct(owner);
    }
}

contract WHITELIST is owned {
    
    mapping (address => bool) public Whitelist;
    
    function WHITELIST (address whitelistAddress) external {
        Whitelist[msg.sender] = true;
    }
    
    function ADDWHITELIST(address whitelistedAddress) onlyOwner external {
        Whitelist[whitelistedAddress] = true;
    }
    
    function REMOVEWHITELIST(address removeAddress) onlyOwner external {
        Whitelist[removeAddress] = false;
    }
    
    modifier isWhitelisted {
        require(Whitelist[msg.sender]) == true;
        _; 
    }
    
    event addWhitelist(address indexed whitelistedAddress);
    
    event removeWhitelist(address indexed removeAddress);
}
