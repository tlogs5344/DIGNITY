pragma solidity ^0.4.21;

contract owned {
    mapping (address => bool) public Owner;
    
    function owned() public {
        Owner[msg.sender] = true;
    }
    
    modifier onlyOwner {
            require(Owner[msg.sender] == true);
            _;
    }
    
    function transferOwnership(address newOwner, address oldOwner) onlyOwner public {
            require(Owner[oldOwner] = true);
            Owner[newOwner] = true;
            Owner[oldOwner] = false;
    }
        
    function kill () onlyOwner external {
        require(Owner[msg.sender] = true);
        selfdestruct(msg.sender);
    }
}

contract WHITELIST is owned {
    
    mapping (address => bool) public Whitelist;
    
    function WHITELIST () public {
        Whitelist[msg.sender] = true;
    }
    
    function ADDWHITELIST(address whitelistedAddress) onlyOwner external {
        Whitelist[whitelistedAddress] = true;
    }
    
    function REMOVEWHITELIST(address removeAddress) onlyOwner external {
        Whitelist[removeAddress] = false;
    }
    
    modifier isWhitelisted {
        require(Whitelist[msg.sender] == true);
        _; 
    }
    
    event addWhitelist(address indexed whitelistedAddress);
    
    event removeWhitelist(address indexed removeAddress);
}
